%{
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "node.h"
#include "tabid.h"
#include "postfix.h"

extern FILE *outfp;

int lbl;

static char *extrns[100]; /* emit externs at the end only */
static int extcnt;
char *dupstr(const char *s);

char *mklbl(int n) {
  static char buf[20];
  sprintf(buf, "_i%d", n);
  return strcpy(malloc(strlen(buf)+1),buf);
}

static void outstr(char *s) {
  while (*s) fprintf(outfp, pfCHAR, (unsigned char)*s++);
  fprintf(outfp, pfCHAR, 0);
}

static char *mkfunc(char *s) {
  static char buf[80];
  strcpy(buf, "_");
  strcat(buf, s);
  return buf;
}

void externs()
{
  int i;
  
  for (i = 0; i < extcnt; i++)
    if (extrns[i])
      fprintf(outfp, pfEXTRN, extrns[i]);
}
%}

%include "y.tab.h"
%term FINIT='(' BLOCO='{' DECL=';' PARAMS=',' RESERVA='#' INDEX='[' FACTORIAL='!'
%term ADD='+' SUB='-' MUL='*' DIV='/' MOD='%' LT='<' GT='>' EQ='=' AND='&' OR='|'

%%

finit: FINIT(blocop,params)	1 {}
finit: FINIT(blocop,NIL) 1 {}

blocop: NIL 1 { /*extrns[extcnt++] = dupstr(mkfunc(p->value.s));*/ }
blocop: bloco 1 {}

bloco: BLOCO(DECL(list,end),decls) 1 {}

list: base 1 {}
list: DECL(list,base) 1 {}

base: VOID 1 {}
base: expr 1 {}
base: bloco 1 {}

lv: ID 1 {}
lv: LOCAL 1 { fprintf(outfp, pfLOCAL, p->value.i * (pfWORD/4));}   

expr: PTR(lv) 1 { fprintf(outfp, pfLOAD);}
expr: PTR(PTR(lv)) 1 {/*TODO*/}
expr: ATR(expr,lv) 1 { fprintf(outfp, pfSTORE); }
expr: INT 1 { fprintf(outfp, pfIMM, p->value.i); }
expr: STR 1 { lbl++; fprintf(outfp, pfRODATA pfALIGN pfLABEL, mklbl(lbl));outstr(p->value.s); fprintf(outfp, pfTEXT pfADDR, mklbl(lbl)); }
expr: REAL 1 {}
expr: UMINUS(expr)  1 { fprintf(outfp, pfNEG); }
expr: NOT(expr)  1 { fprintf(outfp, pfIMM pfEQ, 0); }
expr: REF(expr)  1 {/*TODO*/}
expr: FACTORIAL(expr)  1 {/*TODO*/}
expr: INCR(lv)  1 { fprintf(outfp, pfINCR, 1); /*TODO fazer f(i++) no funciona ainda*/ }
expr: DECR(lv)  1 { fprintf(outfp, pfDECR, 1); }
expr: POSINC(lv)  1 {/*TODO verificar se e igual ao de cima*/ fprintf(outfp, pfINCR, 1);}
expr: POSDEC(lv)  1 {/*TODO verificar se e igual ao de cima*/ fprintf(outfp, pfDECR, 1);}
expr:	ADD(expr,expr)	1 { fprintf(outfp, pfADD); }
expr:	SUB(expr,expr)	1 { fprintf(outfp, pfSUB); }
expr:	MUL(expr,expr)	1 { fprintf(outfp, pfMUL); }
expr:	DIV(expr,expr)	1 { fprintf(outfp, pfDIV); }
expr:	MOD(expr,expr)	1 { fprintf(outfp, pfMOD); }
expr:	LT(expr,expr)	1 { fprintf(outfp, pfMOD); }
expr:	GT(expr,expr)	1 { fprintf(outfp, pfMOD); }
expr:	GE(expr,expr)	1 { fprintf(outfp, pfMOD); }
expr:	LE(expr,expr)	1 { fprintf(outfp, pfMOD); }
expr:	NE(expr,expr)	1 { fprintf(outfp, pfMOD); }
expr:	EQ(expr,expr)	1 { fprintf(outfp, pfMOD); }
expr:	AND(expr,expr)	1 { fprintf(outfp, pfMOD); }
expr:	OR(expr,expr)	1 { fprintf(outfp, pfMOD); }
expr: CALL(ID,args) 1  {fprintf(outfp, pfCALL pfTRASH pfPUSH, mkfunc(LEFT_CHILD(p)->value.s), -1*(int)(pfWORD*(RIGHT_CHILD(p)->place))); }
expr: CALL(ID,VOID) 1  {fprintf(outfp, pfCALL pfTRASH pfPUSH, mkfunc(LEFT_CHILD(p)->value.s), 0*(int)(pfWORD*(RIGHT_CHILD(p)->place))); }


args: PARAMS(NIL,expr) 1 {}
args: PARAMS(args,expr) 1 {}

end: NIL 1 {}
end: brk 1 {}

brk: BREAK 1 {}
brk: CONTINUE 1 {}

decls: NIL 1 {}
decls: DECL(decls,param)

params: param 1 {}
params: PARAMS(params,param) 1 {}

param: PARAM(tipo,ID) 1 {}

tipo: STRING 1 {}
tipo: INTEGER 1 {}
tipo: NUMBER 1 {}


%! bloco: BLOCO(list,decls) 1 {}
%! bloco: BLOCO(DECL(list,end),decls) 1 {}
%%
#include "y.tab.h"
extern void yyerror(const char*);
extern char **yynames;
extern int trace;