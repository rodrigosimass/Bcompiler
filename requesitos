[X] Verificar se ao declarar uma var global, ela é unica ou nao.
[X] Uma função não pode declarar no seu corpo principal identificadores com mesmo nome dos seus argumentos formais. 
[ ] Verifica que identificadores que foram declarados como constantes nao possam ser utilizado em operações que modifiquem o seu valor.
[X] Os identificadores declarados constantes que não sejam public têm de ser iniciados.
[X] Nem os argumentos formais nem nenhum dos blocos da função pode declarar variáveis com o nome da própria função. 
[X] A função só pode ser invocada através de um identificador que refira uma função previamente declarada ou definida. 
[X] O tipo e número de parâmetros atuais deve ser igual ao tipo e número de parâmetros formais.
[X] Continue deverá ser a última instrução do bloco em que se insere.
[X] Continue só pode existir dentro de um ciclo. 
[X] Break iniciada pela palavra reservada break, a existir deverá ser a última instrução do bloco em que se insere.
[X] Break só pode existir dentro de um ciclo.
[X] Ao indexar (str[x]) O identificador deverá designar apenas uma variável ou constante do tipo ponteiro.  
[X] Uma expressão entre parênteses não pode ser utilizada como left-value ( ver em indexação ).

-----------VARS------------

1 integer
2 string
3 number
4 void

6 const integer
7 const string
8 const number
9 const void

11 integer *
12 string *
13 number *
14 void *

16 const integer *
17 const string *
18 const number *
19 const void *

--------FUNCS--------------

21 integer
22 string
23 number
24 void

26 const integer
27 const string
28 const number
29 const void

31 integer *
32 string *
33 number *
34 void *

36 const integer *
37 const string *
38 const number *
39 const void *

ATR legais:
string := integer
string := *integer   em string.diy: string := &(string[i]) <=> string := &(integer) <=> string := *integer
pointer := integer
number := integer